#If you are reading this, you have passed the static analysis check.
#Achievement Unlocked: Read the code before you execute the code.
#Experience: +50 points
#Level: Expert

function Get-ImpHash {
    param (
        [Parameter(Mandatory=$true, Position=0)]
        [string]$FilePath
    )

    if (-not (Test-Path $FilePath)) {
        Write-Host "File not found: $FilePath"
        exit
    }

    if ($ExportHash) {
        $hashType = "Export"
    } else {
        $hashType = "Import"
    }

    $pythonScript = @"
import sys
import pefile

def calculate_hash(file_path, export_hash=False):
    try:
        pe = pefile.PE(file_path)
        if export_hash:
            return "Export hash calculation is not supported."
        else:
            return pe.get_imphash()
    except pefile.PEFormatError:
        return "Not a valid PE file"
    except Exception as e:
        return "Error: " + str(e)

file_path = sys.argv[1]
export_hash = False
if len(sys.argv) > 2 and sys.argv[2].lower() == "true":
    export_hash = True
hash_val = calculate_hash(file_path, export_hash)
print(hash_val)
"@

    $pythonScriptPath = Join-Path -Path $env:TEMP -ChildPath "pe_hash_script.py"
    $pythonScript | Out-File -FilePath $pythonScriptPath -Encoding utf8

    $pythonCommand = "python $pythonScriptPath ""$FilePath"" $ExportHash"
    $result = Invoke-Expression -Command $pythonCommand

    if ($result -like "Error:*") {
        Write-Host "Error: $result"
    } else {
        Write-Host "$hashType Hash: $result"
    }
}

function Get-ExpHash {
    param (
        [Parameter(Mandatory=$true, Position=0)]
        [string]$FilePath
    )

    if (-not (Test-Path $FilePath)) {
        Write-Host "File not found: $FilePath"
        exit
    }

    $hashType = "Export"

    $pythonScript = @"
import sys
import hashlib
import pefile

def calculate_hash(file_path):
    try:
        pe = pefile.PE(file_path)
        if not hasattr(pe, "DIRECTORY_ENTRY_EXPORT"):
            return ""
        if not hasattr(pe.DIRECTORY_ENTRY_EXPORT, "symbols"):
            return ""

        export_list = [
            e.name.decode().lower()
            for e in pe.DIRECTORY_ENTRY_EXPORT.symbols
            if e and e.name is not None
        ]
        if len(export_list) == 0:
            return ""

        return hashlib.sha256(",".join(export_list).encode()).hexdigest()

    except pefile.PEFormatError:
        return "Not a valid PE file"
    except Exception as e:
        return "Error: " + str(e)

file_path = sys.argv[1]
hash_val = calculate_hash(file_path)
print(hash_val)
"@

    $pythonScriptPath = Join-Path -Path $env:TEMP -ChildPath "pe_hash_script.py"
    $pythonScript | Out-File -FilePath $pythonScriptPath -Encoding utf8

    $pythonCommand = "python $pythonScriptPath ""$FilePath"""
    $result = Invoke-Expression -Command $pythonCommand

    if ($result -like "Error:*") {
        Write-Host "Error: $result"
    } elseif ([string]::IsNullOrWhiteSpace($result)) {
        Write-Host "No export hash found."
    } else {
        Write-Host "$hashType Hash: $result"
    }
}
